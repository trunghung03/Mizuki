Data to keep:
	soil moisture
	air humidity + temp

Possible Platform:
	Thingspeak IOT (pro:simple API interface, cons: rate limited 15s/request)
	Blynk (pro: free tier? cons: lack of clear documentation)
	The Things Network (work directly with LoraWAN)
	ESPHome (Home assistant) (Doesn't support Lora)
	Cayenne (Doesn't support ESP32)

	Firebase (pro: generous free tier, much documentation cons: hard to learn) -- This is the main choice

Github page:
	https://github.com/trunghung03/Mizuki


Method:
	Updating data (Thingspeak): 
		GET request with URL provided by Thingspeak.
		Syntax: 
			GET https://api.thingspeak.com/update?api_key={API_KEY}&field1={SoilMoisture}&field2={AirHumid}&field3={Temp}
		Example request: 
			GET https://api.thingspeak.com/update?api_key=7UTCW2SBD9T0CQB5&field1=75&field2=75&field3=30
		Request tested by POSTMAN

	Updating data (Firebase):
		Function provided by Arduino Firebase library.
		Aiming to make the interface simpler like Thingspeak by using Firebase Function.

Case study:
	Overview: Control ESP32 LED with switch on web interface
	Reference: https://randomnerdtutorials.com/esp32-firebase-realtime-database/

	Components: 
		- Web interface (plain web)
		- Backend (Firebase: Realtime Database + Function)
		- ESP32 (arduino-timer, httpclient)

	Design decision:
		Firebase:
		- Made with Firebase, serverless platform, running on RTDB, simple REST API (not simple to build)
		- Pro: 
			- Many product can be built along with this, due to being a platform
			- Flexible
			- Fast, somewhat simple NoSQL JSON database.
		- Cons:
			- Firebase is not the most popular platform out there, RTDB is even more niche compared to Firestore. Which means hard to find documentation or community resources.
			- Run on Javascript, 1 more language on the tech stack.
			- RTDB is not fully optimized for time-series realtime update data
			- Not free.

		
		REST API, instead of json: 
		- No need for Arduino Firebase library, able to change from Firebase to another platform if needed.
		- JS networking is complicated.


		Web interface: Generated by GPT-4 based on Firebase backend

		ESP32:
		- Query from LoRa AND upload to backend -> Multitasking is needed. Multitasking is HARD!
		- Arduino Multitasking library: 
			Scheduler (ESP32 not supported),
			FreeRTOS (Weird error),
			Arduino-timer:
				Non blocking timer,
				Not really multitasking,
				Simple and easy

		- We only recieve data when there is a need to, maybe multitasking is not needed.
			Interrupt:
				- Recieving LoRa is attached to a controller
				- When there is signal, pull the interrupt and send the signal.

